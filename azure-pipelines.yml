# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - production

pool:
  vmImage: ubuntu-latest
variables:
  - group: shared_variables
  - group: version_variables
  - name: app_version_name
    value: $(app_version_major).$(app_version_minor).$(app_version_patch)

name: $(app_version_major).$(app_version_minor).$(app_version_patch)+$(app_version_code)

jobs:
  - job: android_job
    displayName: Android job
    pool:
      vmImage: ubuntu-latest
    steps:
      - template: setup_flutter.yml

      - task: DownloadSecureFile@1
        name: keyproperties
        displayName: Download key.properties file
        inputs:
          secureFile: "key.properties"

      - task: DownloadSecureFile@1
        name: keystore
        displayName: Download keystore file
        inputs:
          secureFile: "key.jks"

      - script: |
          cp $(keyproperties.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
          cp $(keystore.secureFilePath) $(Build.SourcesDirectory)/android/app/key.jks

          echo Android folder contents: $(ls $(Build.SourcesDirectory)/android)
          echo App folder contents: $(ls $(Build.SourcesDirectory)/android/app)
        displayName: Copy keystore and key properties files

      - script: |
          flutter test
        displayName: "Run Flutter Tests"

      - script: |
          sed -i "s/versionCode [0-9]\+/versionCode $(app_version_code)/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$(app_version_name)\"/" android/app/build.gradle

          echo "Updated build.gradle:"
          cat android/app/build.gradle | grep "versionCode\|versionName"

          flutter build appbundle --release --no-tree-shake-icons
        displayName: "Build flutter Android App (AAB)"

      - task: CopyFiles@2
        inputs:
          Contents: "**/app-release.aab"
          TargetFolder: $(Build.ArtifactStagingDirectory)
          flattenFolders: true

      - task: PublishBuildArtifacts@1
        displayName: Publish Android Artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'App'
          publishLocation: 'Container'

      